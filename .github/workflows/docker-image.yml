name: Build and Push Docker Image

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'

jobs:

  bump-version:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set next snapshot version
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            version=$(node -p "require('./package.json').version")
            IFS='.' read -r major minor patch <<< "$version"
            next_patch=$((patch+1))
            new_version="${major}.${minor}.${next_patch}-snapshot"
            jq ".version = \"$new_version\"" package.json > tmp.$$.json && mv tmp.$$.json package.json
            git config user.name "GitHub Actions"
            git config user.email "actions@github.com"
            git commit -am "chore: bump version to ${new_version}"
            git push origin main
          fi

  build:
    runs-on: ubuntu-latest

    steps:

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract current version from package.json
        id: get-version
        run: |
          version=$(node -p "require('./package.json').version.replace('-snapshot', '')")
          echo "VERSION=$version" >> $GITHUB_ENV

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=${{ env.VERSION }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/arm64
          build-args: |
            NEXT_PUBLIC_CLIENTVAR=clientvar
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Create GitHub Tag
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            git tag "v${{ env.VERSION }}"
            git push origin --tags
          fi
